/*
 * m9sweeper dash
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.m9sweeper.trawler.framework.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
/**
 * DockerRegistriesDto
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-09-28T11:46:20.946110-05:00[America/Chicago]")
public class DockerRegistriesDto {
  @SerializedName("id")
  private BigDecimal id = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("hostname")
  private String hostname = null;

  @SerializedName("loginRequired")
  private Boolean loginRequired = null;

  @SerializedName("username")
  private String username = null;

  @SerializedName("password")
  private String password = null;

  @SerializedName("authType")
  private String authType = null;

  @SerializedName("authDetails")
  private Object authDetails = null;

  @SerializedName("aliases")
  private List<String> aliases = new ArrayList<String>();

  public DockerRegistriesDto id(BigDecimal id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(required = true, description = "")
  public BigDecimal getId() {
    return id;
  }

  public void setId(BigDecimal id) {
    this.id = id;
  }

  public DockerRegistriesDto name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(required = true, description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public DockerRegistriesDto hostname(String hostname) {
    this.hostname = hostname;
    return this;
  }

   /**
   * Get hostname
   * @return hostname
  **/
  @Schema(required = true, description = "")
  public String getHostname() {
    return hostname;
  }

  public void setHostname(String hostname) {
    this.hostname = hostname;
  }

  public DockerRegistriesDto loginRequired(Boolean loginRequired) {
    this.loginRequired = loginRequired;
    return this;
  }

   /**
   * Get loginRequired
   * @return loginRequired
  **/
  @Schema(required = true, description = "")
  public Boolean isLoginRequired() {
    return loginRequired;
  }

  public void setLoginRequired(Boolean loginRequired) {
    this.loginRequired = loginRequired;
  }

  public DockerRegistriesDto username(String username) {
    this.username = username;
    return this;
  }

   /**
   * Get username
   * @return username
  **/
  @Schema(required = true, description = "")
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }

  public DockerRegistriesDto password(String password) {
    this.password = password;
    return this;
  }

   /**
   * Get password
   * @return password
  **/
  @Schema(required = true, description = "")
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }

  public DockerRegistriesDto authType(String authType) {
    this.authType = authType;
    return this;
  }

   /**
   * Get authType
   * @return authType
  **/
  @Schema(required = true, description = "")
  public String getAuthType() {
    return authType;
  }

  public void setAuthType(String authType) {
    this.authType = authType;
  }

  public DockerRegistriesDto authDetails(Object authDetails) {
    this.authDetails = authDetails;
    return this;
  }

   /**
   * Get authDetails
   * @return authDetails
  **/
  @Schema(required = true, description = "")
  public Object getAuthDetails() {
    return authDetails;
  }

  public void setAuthDetails(Object authDetails) {
    this.authDetails = authDetails;
  }

  public DockerRegistriesDto aliases(List<String> aliases) {
    this.aliases = aliases;
    return this;
  }

  public DockerRegistriesDto addAliasesItem(String aliasesItem) {
    this.aliases.add(aliasesItem);
    return this;
  }

   /**
   * Get aliases
   * @return aliases
  **/
  @Schema(required = true, description = "")
  public List<String> getAliases() {
    return aliases;
  }

  public void setAliases(List<String> aliases) {
    this.aliases = aliases;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DockerRegistriesDto dockerRegistriesDto = (DockerRegistriesDto) o;
    return Objects.equals(this.id, dockerRegistriesDto.id) &&
        Objects.equals(this.name, dockerRegistriesDto.name) &&
        Objects.equals(this.hostname, dockerRegistriesDto.hostname) &&
        Objects.equals(this.loginRequired, dockerRegistriesDto.loginRequired) &&
        Objects.equals(this.username, dockerRegistriesDto.username) &&
        Objects.equals(this.password, dockerRegistriesDto.password) &&
        Objects.equals(this.authType, dockerRegistriesDto.authType) &&
        Objects.equals(this.authDetails, dockerRegistriesDto.authDetails) &&
        Objects.equals(this.aliases, dockerRegistriesDto.aliases);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, hostname, loginRequired, username, password, authType, authDetails, aliases);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DockerRegistriesDto {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    loginRequired: ").append(toIndentedString(loginRequired)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    authType: ").append(toIndentedString(authType)).append("\n");
    sb.append("    authDetails: ").append(toIndentedString(authDetails)).append("\n");
    sb.append("    aliases: ").append(toIndentedString(aliases)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
