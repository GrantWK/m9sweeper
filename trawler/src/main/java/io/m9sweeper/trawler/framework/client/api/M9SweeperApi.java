/*
 * m9sweeper dash
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.m9sweeper.trawler.framework.client.api;

import io.m9sweeper.trawler.framework.client.handler.ApiCallback;
import io.m9sweeper.trawler.framework.client.handler.ApiClient;
import io.m9sweeper.trawler.framework.client.handler.ApiException;
import io.m9sweeper.trawler.framework.client.handler.ApiResponse;
import io.m9sweeper.trawler.framework.client.handler.Configuration;
import io.m9sweeper.trawler.framework.client.handler.Pair;
import io.m9sweeper.trawler.framework.client.handler.ProgressRequestBody;
import io.m9sweeper.trawler.framework.client.handler.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import io.m9sweeper.trawler.framework.client.model.ClusterResponse;
import io.m9sweeper.trawler.framework.client.model.DockerRegistriesResponseDto;
import io.m9sweeper.trawler.framework.client.model.ImageCreateDto;
import io.m9sweeper.trawler.framework.client.model.ImageDetailsResponseDto;
import io.m9sweeper.trawler.framework.client.model.ImageScanResultSaveResponse;
import io.m9sweeper.trawler.framework.client.model.ImageTrawlerResultDto;
import io.m9sweeper.trawler.framework.client.model.PoliciesByClusterResponse;
import io.m9sweeper.trawler.framework.client.model.TrawlerScanResults;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class M9SweeperApi {
    private ApiClient apiClient;

    public M9SweeperApi() {
        this(Configuration.getDefaultApiClient());
    }

    public M9SweeperApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for clusterControllerGetClusterByClusterName
     * @param clusterName  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call clusterControllerGetClusterByClusterNameCall(String clusterName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/clusters/by-name/{clusterName}"
            .replaceAll("\\{" + "clusterName" + "\\}", apiClient.escapeString(clusterName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-auth-token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call clusterControllerGetClusterByClusterNameValidateBeforeCall(String clusterName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterName' is set
        if (clusterName == null) {
            throw new ApiException("Missing the required parameter 'clusterName' when calling clusterControllerGetClusterByClusterName(Async)");
        }
        
        com.squareup.okhttp.Call call = clusterControllerGetClusterByClusterNameCall(clusterName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param clusterName  (required)
     * @return ClusterResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClusterResponse clusterControllerGetClusterByClusterName(String clusterName) throws ApiException {
        ApiResponse<ClusterResponse> resp = clusterControllerGetClusterByClusterNameWithHttpInfo(clusterName);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param clusterName  (required)
     * @return ApiResponse&lt;ClusterResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClusterResponse> clusterControllerGetClusterByClusterNameWithHttpInfo(String clusterName) throws ApiException {
        com.squareup.okhttp.Call call = clusterControllerGetClusterByClusterNameValidateBeforeCall(clusterName, null, null);
        Type localVarReturnType = new TypeToken<ClusterResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param clusterName  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call clusterControllerGetClusterByClusterNameAsync(String clusterName, final ApiCallback<ClusterResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = clusterControllerGetClusterByClusterNameValidateBeforeCall(clusterName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClusterResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for clusterControllerGetClusterById
     * @param clusterId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call clusterControllerGetClusterByIdCall(BigDecimal clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/clusters/{clusterId}"
            .replaceAll("\\{" + "clusterId" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-auth-token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call clusterControllerGetClusterByIdValidateBeforeCall(BigDecimal clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling clusterControllerGetClusterById(Async)");
        }
        
        com.squareup.okhttp.Call call = clusterControllerGetClusterByIdCall(clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param clusterId  (required)
     * @return ClusterResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClusterResponse clusterControllerGetClusterById(BigDecimal clusterId) throws ApiException {
        ApiResponse<ClusterResponse> resp = clusterControllerGetClusterByIdWithHttpInfo(clusterId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param clusterId  (required)
     * @return ApiResponse&lt;ClusterResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClusterResponse> clusterControllerGetClusterByIdWithHttpInfo(BigDecimal clusterId) throws ApiException {
        com.squareup.okhttp.Call call = clusterControllerGetClusterByIdValidateBeforeCall(clusterId, null, null);
        Type localVarReturnType = new TypeToken<ClusterResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param clusterId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call clusterControllerGetClusterByIdAsync(BigDecimal clusterId, final ApiCallback<ClusterResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = clusterControllerGetClusterByIdValidateBeforeCall(clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClusterResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for dockerRegistriesControllerGetDockerRegistries
     * @param page  (optional)
     * @param limit  (optional)
     * @param sortBy  (optional)
     * @param sortDirection  (optional)
     * @param loginRequired  (optional)
     * @param authType  (optional)
     * @param url  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call dockerRegistriesControllerGetDockerRegistriesCall(BigDecimal page, BigDecimal limit, String sortBy, String sortDirection, String loginRequired, String authType, String url, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/docker-registries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort-by", sortBy));
        if (sortDirection != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort-direction", sortDirection));
        if (loginRequired != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("login-required", loginRequired));
        if (authType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("auth-type", authType));
        if (url != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("url", url));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-auth-token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call dockerRegistriesControllerGetDockerRegistriesValidateBeforeCall(BigDecimal page, BigDecimal limit, String sortBy, String sortDirection, String loginRequired, String authType, String url, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = dockerRegistriesControllerGetDockerRegistriesCall(page, limit, sortBy, sortDirection, loginRequired, authType, url, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param page  (optional)
     * @param limit  (optional)
     * @param sortBy  (optional)
     * @param sortDirection  (optional)
     * @param loginRequired  (optional)
     * @param authType  (optional)
     * @param url  (optional)
     * @return DockerRegistriesResponseDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DockerRegistriesResponseDto dockerRegistriesControllerGetDockerRegistries(BigDecimal page, BigDecimal limit, String sortBy, String sortDirection, String loginRequired, String authType, String url) throws ApiException {
        ApiResponse<DockerRegistriesResponseDto> resp = dockerRegistriesControllerGetDockerRegistriesWithHttpInfo(page, limit, sortBy, sortDirection, loginRequired, authType, url);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param page  (optional)
     * @param limit  (optional)
     * @param sortBy  (optional)
     * @param sortDirection  (optional)
     * @param loginRequired  (optional)
     * @param authType  (optional)
     * @param url  (optional)
     * @return ApiResponse&lt;DockerRegistriesResponseDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DockerRegistriesResponseDto> dockerRegistriesControllerGetDockerRegistriesWithHttpInfo(BigDecimal page, BigDecimal limit, String sortBy, String sortDirection, String loginRequired, String authType, String url) throws ApiException {
        com.squareup.okhttp.Call call = dockerRegistriesControllerGetDockerRegistriesValidateBeforeCall(page, limit, sortBy, sortDirection, loginRequired, authType, url, null, null);
        Type localVarReturnType = new TypeToken<DockerRegistriesResponseDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param page  (optional)
     * @param limit  (optional)
     * @param sortBy  (optional)
     * @param sortDirection  (optional)
     * @param loginRequired  (optional)
     * @param authType  (optional)
     * @param url  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call dockerRegistriesControllerGetDockerRegistriesAsync(BigDecimal page, BigDecimal limit, String sortBy, String sortDirection, String loginRequired, String authType, String url, final ApiCallback<DockerRegistriesResponseDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = dockerRegistriesControllerGetDockerRegistriesValidateBeforeCall(page, limit, sortBy, sortDirection, loginRequired, authType, url, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DockerRegistriesResponseDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for imageControllerCreateImage
     * @param body  (required)
     * @param skipImageScan  (required)
     * @param clusterId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call imageControllerCreateImageCall(ImageCreateDto body, Boolean skipImageScan, BigDecimal clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/clusters/{clusterId}/images"
            .replaceAll("\\{" + "clusterId" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (skipImageScan != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skipImageScan", skipImageScan));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-auth-token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call imageControllerCreateImageValidateBeforeCall(ImageCreateDto body, Boolean skipImageScan, BigDecimal clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling imageControllerCreateImage(Async)");
        }
        // verify the required parameter 'skipImageScan' is set
        if (skipImageScan == null) {
            throw new ApiException("Missing the required parameter 'skipImageScan' when calling imageControllerCreateImage(Async)");
        }
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling imageControllerCreateImage(Async)");
        }
        
        com.squareup.okhttp.Call call = imageControllerCreateImageCall(body, skipImageScan, clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param body  (required)
     * @param skipImageScan  (required)
     * @param clusterId  (required)
     * @return ImageDetailsResponseDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ImageDetailsResponseDto imageControllerCreateImage(ImageCreateDto body, Boolean skipImageScan, BigDecimal clusterId) throws ApiException {
        ApiResponse<ImageDetailsResponseDto> resp = imageControllerCreateImageWithHttpInfo(body, skipImageScan, clusterId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @param skipImageScan  (required)
     * @param clusterId  (required)
     * @return ApiResponse&lt;ImageDetailsResponseDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ImageDetailsResponseDto> imageControllerCreateImageWithHttpInfo(ImageCreateDto body, Boolean skipImageScan, BigDecimal clusterId) throws ApiException {
        com.squareup.okhttp.Call call = imageControllerCreateImageValidateBeforeCall(body, skipImageScan, clusterId, null, null);
        Type localVarReturnType = new TypeToken<ImageDetailsResponseDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param skipImageScan  (required)
     * @param clusterId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call imageControllerCreateImageAsync(ImageCreateDto body, Boolean skipImageScan, BigDecimal clusterId, final ApiCallback<ImageDetailsResponseDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = imageControllerCreateImageValidateBeforeCall(body, skipImageScan, clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ImageDetailsResponseDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for imageControllerGetImageByDockerUrl
     * @param clusterId  (required)
     * @param dockerImageUrl  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call imageControllerGetImageByDockerUrlCall(BigDecimal clusterId, String dockerImageUrl, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/clusters/{clusterId}/image-by-docker-url"
            .replaceAll("\\{" + "clusterId" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (dockerImageUrl != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dockerImageUrl", dockerImageUrl));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-auth-token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call imageControllerGetImageByDockerUrlValidateBeforeCall(BigDecimal clusterId, String dockerImageUrl, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling imageControllerGetImageByDockerUrl(Async)");
        }
        // verify the required parameter 'dockerImageUrl' is set
        if (dockerImageUrl == null) {
            throw new ApiException("Missing the required parameter 'dockerImageUrl' when calling imageControllerGetImageByDockerUrl(Async)");
        }
        
        com.squareup.okhttp.Call call = imageControllerGetImageByDockerUrlCall(clusterId, dockerImageUrl, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param clusterId  (required)
     * @param dockerImageUrl  (required)
     * @return ImageDetailsResponseDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ImageDetailsResponseDto imageControllerGetImageByDockerUrl(BigDecimal clusterId, String dockerImageUrl) throws ApiException {
        ApiResponse<ImageDetailsResponseDto> resp = imageControllerGetImageByDockerUrlWithHttpInfo(clusterId, dockerImageUrl);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param clusterId  (required)
     * @param dockerImageUrl  (required)
     * @return ApiResponse&lt;ImageDetailsResponseDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ImageDetailsResponseDto> imageControllerGetImageByDockerUrlWithHttpInfo(BigDecimal clusterId, String dockerImageUrl) throws ApiException {
        com.squareup.okhttp.Call call = imageControllerGetImageByDockerUrlValidateBeforeCall(clusterId, dockerImageUrl, null, null);
        Type localVarReturnType = new TypeToken<ImageDetailsResponseDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param clusterId  (required)
     * @param dockerImageUrl  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call imageControllerGetImageByDockerUrlAsync(BigDecimal clusterId, String dockerImageUrl, final ApiCallback<ImageDetailsResponseDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = imageControllerGetImageByDockerUrlValidateBeforeCall(clusterId, dockerImageUrl, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ImageDetailsResponseDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for imageControllerSaveImageScanResults
     * @param body  (required)
     * @param clusterId  (required)
     * @param imageId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call imageControllerSaveImageScanResultsCall(TrawlerScanResults body, BigDecimal clusterId, BigDecimal imageId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/clusters/{clusterId}/images/{imageId}/trawler/scan/results"
            .replaceAll("\\{" + "clusterId" + "\\}", apiClient.escapeString(clusterId.toString()))
            .replaceAll("\\{" + "imageId" + "\\}", apiClient.escapeString(imageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-auth-token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call imageControllerSaveImageScanResultsValidateBeforeCall(TrawlerScanResults body, BigDecimal clusterId, BigDecimal imageId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling imageControllerSaveImageScanResults(Async)");
        }
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling imageControllerSaveImageScanResults(Async)");
        }
        // verify the required parameter 'imageId' is set
        if (imageId == null) {
            throw new ApiException("Missing the required parameter 'imageId' when calling imageControllerSaveImageScanResults(Async)");
        }
        
        com.squareup.okhttp.Call call = imageControllerSaveImageScanResultsCall(body, clusterId, imageId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param body  (required)
     * @param clusterId  (required)
     * @param imageId  (required)
     * @return ImageScanResultSaveResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ImageScanResultSaveResponse imageControllerSaveImageScanResults(TrawlerScanResults body, BigDecimal clusterId, BigDecimal imageId) throws ApiException {
        ApiResponse<ImageScanResultSaveResponse> resp = imageControllerSaveImageScanResultsWithHttpInfo(body, clusterId, imageId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @param clusterId  (required)
     * @param imageId  (required)
     * @return ApiResponse&lt;ImageScanResultSaveResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ImageScanResultSaveResponse> imageControllerSaveImageScanResultsWithHttpInfo(TrawlerScanResults body, BigDecimal clusterId, BigDecimal imageId) throws ApiException {
        com.squareup.okhttp.Call call = imageControllerSaveImageScanResultsValidateBeforeCall(body, clusterId, imageId, null, null);
        Type localVarReturnType = new TypeToken<ImageScanResultSaveResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param clusterId  (required)
     * @param imageId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call imageControllerSaveImageScanResultsAsync(TrawlerScanResults body, BigDecimal clusterId, BigDecimal imageId, final ApiCallback<ImageScanResultSaveResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = imageControllerSaveImageScanResultsValidateBeforeCall(body, clusterId, imageId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ImageScanResultSaveResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for imageControllerSaveImageScanResultsPerPolicy
     * @param body  (required)
     * @param clusterId  (required)
     * @param imageId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call imageControllerSaveImageScanResultsPerPolicyCall(ImageTrawlerResultDto body, BigDecimal clusterId, BigDecimal imageId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/clusters/{clusterId}/images/{imageId}/trawler/scan/results/per-policy"
            .replaceAll("\\{" + "clusterId" + "\\}", apiClient.escapeString(clusterId.toString()))
            .replaceAll("\\{" + "imageId" + "\\}", apiClient.escapeString(imageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-auth-token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call imageControllerSaveImageScanResultsPerPolicyValidateBeforeCall(ImageTrawlerResultDto body, BigDecimal clusterId, BigDecimal imageId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling imageControllerSaveImageScanResultsPerPolicy(Async)");
        }
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling imageControllerSaveImageScanResultsPerPolicy(Async)");
        }
        // verify the required parameter 'imageId' is set
        if (imageId == null) {
            throw new ApiException("Missing the required parameter 'imageId' when calling imageControllerSaveImageScanResultsPerPolicy(Async)");
        }
        
        com.squareup.okhttp.Call call = imageControllerSaveImageScanResultsPerPolicyCall(body, clusterId, imageId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param body  (required)
     * @param clusterId  (required)
     * @param imageId  (required)
     * @return ImageScanResultSaveResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ImageScanResultSaveResponse imageControllerSaveImageScanResultsPerPolicy(ImageTrawlerResultDto body, BigDecimal clusterId, BigDecimal imageId) throws ApiException {
        ApiResponse<ImageScanResultSaveResponse> resp = imageControllerSaveImageScanResultsPerPolicyWithHttpInfo(body, clusterId, imageId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @param clusterId  (required)
     * @param imageId  (required)
     * @return ApiResponse&lt;ImageScanResultSaveResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ImageScanResultSaveResponse> imageControllerSaveImageScanResultsPerPolicyWithHttpInfo(ImageTrawlerResultDto body, BigDecimal clusterId, BigDecimal imageId) throws ApiException {
        com.squareup.okhttp.Call call = imageControllerSaveImageScanResultsPerPolicyValidateBeforeCall(body, clusterId, imageId, null, null);
        Type localVarReturnType = new TypeToken<ImageScanResultSaveResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param clusterId  (required)
     * @param imageId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call imageControllerSaveImageScanResultsPerPolicyAsync(ImageTrawlerResultDto body, BigDecimal clusterId, BigDecimal imageId, final ApiCallback<ImageScanResultSaveResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = imageControllerSaveImageScanResultsPerPolicyValidateBeforeCall(body, clusterId, imageId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ImageScanResultSaveResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for policyControllerGetPoliciesByClusterId
     * @param clusterId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call policyControllerGetPoliciesByClusterIdCall(BigDecimal clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/policies/by-cluster/{clusterId}"
            .replaceAll("\\{" + "clusterId" + "\\}", apiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-auth-token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call policyControllerGetPoliciesByClusterIdValidateBeforeCall(BigDecimal clusterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling policyControllerGetPoliciesByClusterId(Async)");
        }
        
        com.squareup.okhttp.Call call = policyControllerGetPoliciesByClusterIdCall(clusterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param clusterId  (required)
     * @return PoliciesByClusterResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PoliciesByClusterResponse policyControllerGetPoliciesByClusterId(BigDecimal clusterId) throws ApiException {
        ApiResponse<PoliciesByClusterResponse> resp = policyControllerGetPoliciesByClusterIdWithHttpInfo(clusterId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param clusterId  (required)
     * @return ApiResponse&lt;PoliciesByClusterResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PoliciesByClusterResponse> policyControllerGetPoliciesByClusterIdWithHttpInfo(BigDecimal clusterId) throws ApiException {
        com.squareup.okhttp.Call call = policyControllerGetPoliciesByClusterIdValidateBeforeCall(clusterId, null, null);
        Type localVarReturnType = new TypeToken<PoliciesByClusterResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param clusterId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call policyControllerGetPoliciesByClusterIdAsync(BigDecimal clusterId, final ApiCallback<PoliciesByClusterResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = policyControllerGetPoliciesByClusterIdValidateBeforeCall(clusterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PoliciesByClusterResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
