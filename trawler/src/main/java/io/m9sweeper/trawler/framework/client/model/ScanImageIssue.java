/*
 * m9sweeper dash
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.m9sweeper.trawler.framework.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
/**
 * ScanImageIssue
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-09-28T11:46:20.946110-05:00[America/Chicago]")
public class ScanImageIssue {
  @SerializedName("scannerId")
  private BigDecimal scannerId = null;

  @SerializedName("scannerName")
  private String scannerName = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("type")
  private String type = null;

  @SerializedName("vulnerabilityDescUrl")
  private String vulnerabilityDescUrl = null;

  @SerializedName("severity")
  private String severity = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("isCompliant")
  private Boolean isCompliant = null;

  @SerializedName("isFixable")
  private Boolean isFixable = null;

  @SerializedName("wasFixed")
  private Boolean wasFixed = null;

  @SerializedName("data")
  private String data = null;

  @SerializedName("complianceReason")
  private String complianceReason = null;

  public ScanImageIssue scannerId(BigDecimal scannerId) {
    this.scannerId = scannerId;
    return this;
  }

   /**
   * Get scannerId
   * @return scannerId
  **/
  @Schema(required = true, description = "")
  public BigDecimal getScannerId() {
    return scannerId;
  }

  public void setScannerId(BigDecimal scannerId) {
    this.scannerId = scannerId;
  }

  public ScanImageIssue scannerName(String scannerName) {
    this.scannerName = scannerName;
    return this;
  }

   /**
   * Get scannerName
   * @return scannerName
  **/
  @Schema(required = true, description = "")
  public String getScannerName() {
    return scannerName;
  }

  public void setScannerName(String scannerName) {
    this.scannerName = scannerName;
  }

  public ScanImageIssue name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(required = true, description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public ScanImageIssue type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @Schema(required = true, description = "")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public ScanImageIssue vulnerabilityDescUrl(String vulnerabilityDescUrl) {
    this.vulnerabilityDescUrl = vulnerabilityDescUrl;
    return this;
  }

   /**
   * Get vulnerabilityDescUrl
   * @return vulnerabilityDescUrl
  **/
  @Schema(required = true, description = "")
  public String getVulnerabilityDescUrl() {
    return vulnerabilityDescUrl;
  }

  public void setVulnerabilityDescUrl(String vulnerabilityDescUrl) {
    this.vulnerabilityDescUrl = vulnerabilityDescUrl;
  }

  public ScanImageIssue severity(String severity) {
    this.severity = severity;
    return this;
  }

   /**
   * Get severity
   * @return severity
  **/
  @Schema(required = true, description = "")
  public String getSeverity() {
    return severity;
  }

  public void setSeverity(String severity) {
    this.severity = severity;
  }

  public ScanImageIssue description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @Schema(required = true, description = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public ScanImageIssue isCompliant(Boolean isCompliant) {
    this.isCompliant = isCompliant;
    return this;
  }

   /**
   * Get isCompliant
   * @return isCompliant
  **/
  @Schema(required = true, description = "")
  public Boolean isIsCompliant() {
    return isCompliant;
  }

  public void setIsCompliant(Boolean isCompliant) {
    this.isCompliant = isCompliant;
  }

  public ScanImageIssue isFixable(Boolean isFixable) {
    this.isFixable = isFixable;
    return this;
  }

   /**
   * Get isFixable
   * @return isFixable
  **/
  @Schema(required = true, description = "")
  public Boolean isIsFixable() {
    return isFixable;
  }

  public void setIsFixable(Boolean isFixable) {
    this.isFixable = isFixable;
  }

  public ScanImageIssue wasFixed(Boolean wasFixed) {
    this.wasFixed = wasFixed;
    return this;
  }

   /**
   * Get wasFixed
   * @return wasFixed
  **/
  @Schema(required = true, description = "")
  public Boolean isWasFixed() {
    return wasFixed;
  }

  public void setWasFixed(Boolean wasFixed) {
    this.wasFixed = wasFixed;
  }

  public ScanImageIssue data(String data) {
    this.data = data;
    return this;
  }

   /**
   * Get data
   * @return data
  **/
  @Schema(required = true, description = "")
  public String getData() {
    return data;
  }

  public void setData(String data) {
    this.data = data;
  }

  public ScanImageIssue complianceReason(String complianceReason) {
    this.complianceReason = complianceReason;
    return this;
  }

   /**
   * Get complianceReason
   * @return complianceReason
  **/
  @Schema(required = true, description = "")
  public String getComplianceReason() {
    return complianceReason;
  }

  public void setComplianceReason(String complianceReason) {
    this.complianceReason = complianceReason;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScanImageIssue scanImageIssue = (ScanImageIssue) o;
    return Objects.equals(this.scannerId, scanImageIssue.scannerId) &&
        Objects.equals(this.scannerName, scanImageIssue.scannerName) &&
        Objects.equals(this.name, scanImageIssue.name) &&
        Objects.equals(this.type, scanImageIssue.type) &&
        Objects.equals(this.vulnerabilityDescUrl, scanImageIssue.vulnerabilityDescUrl) &&
        Objects.equals(this.severity, scanImageIssue.severity) &&
        Objects.equals(this.description, scanImageIssue.description) &&
        Objects.equals(this.isCompliant, scanImageIssue.isCompliant) &&
        Objects.equals(this.isFixable, scanImageIssue.isFixable) &&
        Objects.equals(this.wasFixed, scanImageIssue.wasFixed) &&
        Objects.equals(this.data, scanImageIssue.data) &&
        Objects.equals(this.complianceReason, scanImageIssue.complianceReason);
  }

  @Override
  public int hashCode() {
    return Objects.hash(scannerId, scannerName, name, type, vulnerabilityDescUrl, severity, description, isCompliant, isFixable, wasFixed, data, complianceReason);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScanImageIssue {\n");
    
    sb.append("    scannerId: ").append(toIndentedString(scannerId)).append("\n");
    sb.append("    scannerName: ").append(toIndentedString(scannerName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    vulnerabilityDescUrl: ").append(toIndentedString(vulnerabilityDescUrl)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    isCompliant: ").append(toIndentedString(isCompliant)).append("\n");
    sb.append("    isFixable: ").append(toIndentedString(isFixable)).append("\n");
    sb.append("    wasFixed: ").append(toIndentedString(wasFixed)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    complianceReason: ").append(toIndentedString(complianceReason)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
