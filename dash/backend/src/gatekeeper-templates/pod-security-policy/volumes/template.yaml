apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8spspvolumetypes
  annotations:
    description: Controls usage of volume types.
    minesweeper.io/exceptions: "true"
    minesweeper.io/apiGroup: ""
    minesweeper.io/kinds: "Pod"
spec:
  crd:
    spec:
      names:
        kind: K8sPSPVolumeTypes
      validation:
        # Schema for the `parameters` field
        openAPIV3Schema:
          properties:
            volumes:
              type: array
              items:
                type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8spspvolumetypes

        m9s_exception_pod(pod) = result {
          x :=
          [
          # START M9S EXCEPTION BLOCK 1#
           true
          # END M9S EXCEPTION BLOCK 1#
          ]
          result := x
        }

        m9s_exception_pod_and_image(pod, container) = result {
          x :=
          [
          # START M9S EXCEPTION BLOCK 2#
          {true, true}
          # END M9S EXCEPTION BLOCK 2#
          ]
          result := x
        }

        violation[{"msg": msg}] {
          result_from_pod := m9s_exception_pod(input.review.object)
          check := [x | x := result_from_pod[_]; x == true]
          not count(check) > 0
          msg := sprintf("This image namespace is not in m9sweeper exception list: %v.", [check])
        }

        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          result_from_pod_and_image := m9s_exception_pod_and_image(input.review.object, container)
          check := [x | x := result_from_pod_and_image[_]; x == {true, true}]
          not count(check) > 0
          msg := sprintf("This image name and namespace is not in m9sweeper exception list: %v.", [check])
        }

        violation[{"msg": msg, "details": {}}] {
            volume_fields := {x | input.review.object.spec.volumes[_][x]; x != "name"}
            field := volume_fields[_]
            not input_volume_type_allowed(field)
            msg := sprintf("The volume type %v is not allowed, pod: %v. Allowed volume types: %v", [field, input.review.object.metadata.name, input.parameters.volumes])
        }

        # * may be used to allow all volume types
        input_volume_type_allowed(field) {
            input.parameters.volumes[_] == "*"
        }

        input_volume_type_allowed(field) {
            field == input.parameters.volumes[_]
        }
