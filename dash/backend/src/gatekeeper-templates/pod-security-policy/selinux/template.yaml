apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8spspselinuxv2
  annotations:
    description: Controls the SELinux context of the container.
    minesweeper.io/exceptions: "true"
    minesweeper.io/apiGroup: ""
    minesweeper.io/kinds: "Pod"
spec:
  crd:
    spec:
      names:
        kind: K8sPSPSELinuxV2
      validation:
        # Schema for the `parameters` field
        openAPIV3Schema:
          properties:
            allowedSELinuxOptions:
              type: array
              items:
                type: object
                properties:
                  level:
                      type: string
                  role:
                      type: string
                  type:
                      type: string
                  user:
                      type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8spspselinux

        m9s_exception_pod(pod) = result {
          x :=
          [
          # START M9S EXCEPTION BLOCK 1#
           true
          # END M9S EXCEPTION BLOCK 1#
          ]
          result := x
        }

        m9s_exception_pod_and_image(pod, container) = result {
          x :=
          [
          # START M9S EXCEPTION BLOCK 2#
          {true, true}
          # END M9S EXCEPTION BLOCK 2#
          ]
          result := x
        }


        violation[{"msg": msg}] {
          result_from_pod := m9s_exception_pod(input.review.object)
          check := [x | x := result_from_pod[_]; x == true]
          not count(check) > 0
          msg := sprintf("This image namespace is not in m9sweeper exception list: %v.", [check])
        }

        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          result_from_pod_and_image := m9s_exception_pod_and_image(input.review.object, container)
          check := [x | x := result_from_pod_and_image[_]; x == {true, true}]
          not count(check) > 0
          msg := sprintf("This image name and namespace is not in m9sweeper exception list: %v.", [check])
        }

        # Disallow top level custom SELinux options
        violation[{"msg": msg, "details": {}}] {
            has_field(input.review.object.spec.securityContext, "seLinuxOptions")
            not input_seLinuxOptions_allowed(input.review.object.spec.securityContext.seLinuxOptions)
            msg := sprintf("SELinux options is not allowed, pod: %v. Allowed options: %v", [input.review.object.metadata.name, input.parameters.allowedSELinuxOptions])
        }
        # Disallow container level custom SELinux options
        violation[{"msg": msg, "details": {}}] {
            c := input_security_context[_]
            has_field(c.securityContext, "seLinuxOptions")
            not input_seLinuxOptions_allowed(c.securityContext.seLinuxOptions)
            msg := sprintf("SELinux options is not allowed, pod: %v, container %v. Allowed options: %v", [input.review.object.metadata.name, c.name, input.parameters.allowedSELinuxOptions])
        }

        input_seLinuxOptions_allowed(options) {
            params := input.parameters.allowedSELinuxOptions[_]
            field_allowed("level", options, params)
            field_allowed("role", options, params)
            field_allowed("type", options, params)
            field_allowed("user", options, params)
        }

        field_allowed(field, options, params) {
            params[field] == options[field]
        }
        field_allowed(field, options, params) {
            not has_field(options, field)
        }

        input_security_context[c] {
            c := input.review.object.spec.containers[_]
            has_field(c.securityContext, "seLinuxOptions")
        }
        input_security_context[c] {
            c := input.review.object.spec.initContainers[_]
            has_field(c.securityContext, "seLinuxOptions")
        }

        # has_field returns whether an object has a field
        has_field(object, field) = true {
            object[field]
        }
