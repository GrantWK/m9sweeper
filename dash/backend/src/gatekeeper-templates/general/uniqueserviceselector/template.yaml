apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8suniqueserviceselector
  annotations:
    description: Requires Services to have unique selectors within a namespace.
    minesweeper.io/exceptions: "true"
    minesweeper.io/apiGroup: ""
    minesweeper.io/kinds: "Service"
spec:
  crd:
    spec:
      names:
        kind: K8sUniqueServiceSelector
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8suniqueserviceselector

        m9s_exception_pod(pod) = result {
          x :=
          [
          # START M9S EXCEPTION BLOCK 1#
           true
          # END M9S EXCEPTION BLOCK 1#
          ]
          result := x
        }

        m9s_exception_pod_and_image(pod, container) = result {
          x :=
          [
          # START M9S EXCEPTION BLOCK 2#
          {true, true}
          # END M9S EXCEPTION BLOCK 2#
          ]
          result := x
        }

        make_apiversion(kind) = apiVersion {
          g := kind.group
          v := kind.version
          g != ""
          apiVersion = sprintf("%v/%v", [g, v])
        }

        make_apiversion(kind) = apiVersion {
          kind.group == ""
          apiVersion = kind.version
        }

        identical(obj, review) {
          obj.metadata.namespace == review.namespace
          obj.metadata.name == review.name
          obj.kind == review.kind.kind
          obj.apiVersion == make_apiversion(review.kind)
        }

        flatten_selector(obj) = flattened {
          selectors := [s | s = concat(":", [key, val]); val = obj.spec.selector[key]]
          flattened := concat(",", sort(selectors))
        }

        violation[{"msg": msg}] {
          result_from_pod := m9s_exception_pod(input.review.object)
          check := [x | x := result_from_pod[_]; x == true]
          not count(check) > 0
          msg := sprintf("This image namespace is not in m9sweeper exception list: %v.", [check])
        }

        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          result_from_pod_and_image := m9s_exception_pod_and_image(input.review.object, container)
          check := [x | x := result_from_pod_and_image[_]; x == {true, true}]
          not count(check) > 0
          msg := sprintf("This image name and namespace is not in m9sweeper exception list: %v.", [check])
        }

        violation[{"msg": msg}] {
          input.review.kind.kind == "Service"
          input.review.kind.version == "v1"
          input.review.kind.group == ""
          input_selector := flatten_selector(input.review.object)
          other := data.inventory.namespace[namespace][_][_][name]
          not identical(other, input.review)
          other_selector := flatten_selector(other)
          input_selector == other_selector
          msg := sprintf("same selector as service <%v> in namespace <%v>", [name, namespace])
        }
